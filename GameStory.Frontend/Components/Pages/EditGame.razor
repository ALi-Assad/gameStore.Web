@page "/editGame"
@page "/editGame/{id:int}"

@inject NavigationManager NavigationManager;
@inject GameClient GameClient;
@inject GenreClient GenreClient;

@rendermode InteractiveServer 


<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if (genres is null || game is null)
{
  <p><em>Loading...</em></p>
}
else
{
  <EditForm Model="game" FormName="editGame" OnValidSubmit="HandleSubmitAsync" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
      <label for="name">Name</label>
      <InputText id="name" class="form-control" @bind-Value="game.Name" />
      <ValidationMessage For="() => game.Name" />
    </div>
    <div class="form-group">
      <label for="genre">Genre</label>
      <InputSelect id="genre" class="form-control" @bind-Value="game.GenreId">
        <ValidationMessage For="() => game.GenreId" />
        <option value="">-- Select Genre --</option>
        @foreach (var genre in genres)
        {
          <option value="@genre.Id">@genre.Name</option>
        }
      </InputSelect>
    </div>
    <div class="form-group">
      <label for="price">Price</label>
      <InputNumber id="price" class="form-control" @bind-Value="game.Price" />
      <ValidationMessage For="() => game.Price" />
    </div>
    <div class="form-group">
      <label for="release">Release Date</label>
      <InputDate id="release" class="form-control" @bind-Value="game.ReleaseDate" />
      <ValidationMessage For="() => game.ReleaseDate" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
    <a role="button" class="btn btn-secondary" href="/">Cancel</a>
  </EditForm>
}

@code {
  [Parameter]
  public int? Id { get; set; }

  private string title = string.Empty;

  [SupplyParameterFromForm]
  private GameDetails? game { get; set; }

  public Genre[]? genres;

  protected override async Task OnParametersSetAsync()
  {
    if (game is null)
    {
      if (Id is not null)
      {
        game = await GetGameAsync();
        title = $"Edit {game.Name}";
      }
      else
      {
        game = new()
          {
            Name = string.Empty,
            ReleaseDate = DateOnly.FromDateTime(DateTime.Now)
          };
        title = "Add new game";
      }
    }
  }

  protected override async Task OnInitializedAsync()
  {
    genres = await GenreClient.GetGenresAsync();
  }

  private async Task HandleSubmitAsync()
  {
    ArgumentNullException.ThrowIfNull(game);
    if (Id is not null)
    {
      game.Id = (int)Id;
     await GameClient.UpdateGameAsync(game);
    }
    else
    {
     await GameClient.CreateGameAsync(game);
    }

    NavigationManager.NavigateTo("/");
  }

  private async Task UpdateGameAsync()
  {
    ArgumentNullException.ThrowIfNull(game);
    await GameClient.UpdateGameAsync(game);
    NavigationManager.NavigateTo("/");
  }

  private async Task<GameDetails> GetGameAsync()
  {
    GameDetails? gameDetails = await GameClient.GetGameAsync(Id.Value);
    return gameDetails;
  }
}